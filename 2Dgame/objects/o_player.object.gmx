<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_aangstand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>s_playercol</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed=0;

x=x;
y=y;

damage=10;
knockback=20;

controllable=true;
attackable=true;

facedir=0;
movedir=-1;
spd=2;

stamina=100;
stamregen=0;
hp=100;
hpregen=0;

state=0;
    // 0 - normal movement
    // 1 - attack
    // 2 - hit
    // 3 - dead
spritestate=0;
    // 0 - stand
    // 1 - walk
    // 2 - run
    // 3 - attack
    // 4 - hit
    // 5 - die
    // 6 - get up
smin=0;
soffset=0; // aka the current frame in the animation
      
cooldown=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !control.pause {

//Movement
var xspd = 0;
var yspd = 0;
movedir=-1;

if control.controltype!=-1{
    xspd=gamepad_axis_value(control.controltype,gp_axislh);
    yspd=gamepad_axis_value(control.controltype,gp_axislv);
    if gamepad_button_check(controltype, gp_shoulderl) spd=4; else spd=2;
    
    if (gamepad_button_check(controltype, gp_face2) and state==0 and stamina!=0 and controllable==true) { stamina-=5; stamina=clamp(stamina,0,100); state=1; }
    
}
else{
    if keyboard_check(ord('W')) yspd--; // Move forward
    if keyboard_check(ord('S')) yspd++; //Move backwards
    if keyboard_check(ord('D')) xspd++; //Strafe right
    if keyboard_check(ord('A')) xspd--; //Strafe left
    if keyboard_check(vk_shift) spd=4; else spd=2;
    
    if (mouse_check_button_pressed(mb_left) and state==0 and stamina!=0 and controllable==true) { stamina-=5; stamina=clamp(stamina,0,100); state=1; }
    
}

if (xspd!=0 or yspd!=0) movedir = point_direction(0,0,xspd,yspd);
if movedir!=-1 facedir=movedir;

if attackable==true{
//Check through all enemies for being attacked
//https://www.reddit.com/r/gamemaker/comments/31d4qx/detecting_multiple_collisions/
var cnum, ID, num;
num = instance_number(parent_enemy);
    for(cnum = 0; cnum &lt;= num; cnum += 1){
        ID = instance_find(parent_enemy, cnum);
        if instance_exists(ID){
            if collision_circle(ID.x+lengthdir_x(16,ID.dir_face),ID.y+lengthdir_y(16,ID.dir_face),32,self,false,false){
                if(ID.state==1){
                    hp-=ID.damage;
                    hp=clamp(hp,0,100);
                    if hp&lt;=0 { state=3; soffset=0; }
                    else { state=2; soffset=0; }
                    movedir=point_direction(ID.x,ID.y,x,y);
                }
            }
        }
    }
}

if stamregen!=(room_speed*2) stamregen++;
    if stamregen==(room_speed*2) stamina++;
    stamina=clamp(stamina,0,100);
    
    if hpregen!=(room_speed*4) hpregen++;
    if hpregen==(room_speed*4) hp+=.15;
    hp=clamp(hp,0,100);

if state==0{ // Movement   
    //Collisions
    if (movedir!=-1){
        
        if spd==2 spritestate=1;
        else if spd==4 spritestate=2;
    
        if lengthdir_y(1,movedir)!=0 {
            if (place_meeting(x,y+lengthdir_y(spd,movedir),parent_solid)){
                if lengthdir_y(1,movedir)&gt;0 {
                    while(!place_meeting(x,y+1,parent_solid)){
                        y++;
                    }
                }
                else if lengthdir_y(1,movedir)&lt;0 {
                    while(!place_meeting(x,y-1,parent_solid)){
                        y--;
                    }
                }
            }
            else y+=lengthdir_y(spd,movedir);
        }
        if lengthdir_x(1,movedir)!=0 {
            if (place_meeting(x+lengthdir_x(spd,movedir),y,parent_solid)){
                if lengthdir_x(1,movedir)&gt;0 {
                    while(!place_meeting(x+1,y,parent_solid)){
                        x++;
                    }
                }
                else if lengthdir_x(1,movedir)&lt;0 {
                    while(!place_meeting(x-1,y,parent_solid)){
                        x--;
                    }
                }
            }
            else x+=lengthdir_x(spd,movedir);
        }
    } else spritestate=0;
    
    attackable=true; controllable=true;
}
else if state==1{ // Attacking
    stamregen=0;
    attackable=true; controllable=false;
    spritestate=3;
}
else if state==2{ // hit
    hpregen=0;
    attackable=false; controllable=false;
    spritestate=4;
}
else if state==3{ // dead
    hpregen=0;
    stamregen=0;
    attackable=false; controllable=false;
    spritestate=5;
}

stance=s_aangstand;
if instance_exists(parent_enemy) {
    if point_distance(instance_nearest(x,y,parent_enemy).x,instance_nearest(x,y,parent_enemy).y,x,y)&lt;512 { stance=s_aangstance; }
}

if spritestate==0{ // Standing
    sprite_index=stance;
    image_index= floor((facedir)/45);
    soffset=0; smin=0;
}
else if spritestate==1{ // Walking
    sprite_index=s_aangwalk;
    
    smin=floor((facedir)/45)*8;
    image_index=soffset+smin;
    
    soffset+=(6/room_speed); //I calculate the frame to use by hand so that when the sprite changes to running or a new angle
    if (soffset&gt;=8) soffset=0; // Then you're still aways putting the same foot forward
}
else if spritestate==2{ // Running
    sprite_index=s_aangrun;
    
    smin=floor((facedir)/45)*8;
    image_index=soffset+smin;
    
    soffset+=(8/room_speed);
    if (soffset&gt;=8) soffset=0;
}
else if spritestate==3{ // Attacking
 // PLACEHOLDER so Aang doesn't vanish
    sprite_index=s_aangblock;
    
    smin=floor((facedir)/45);
    image_index=soffset+smin;
    
    soffset+=(2/room_speed);
    if soffset&gt;=1 { spritestate=0; state=0; soffset=0; }
    
    show_debug_message("soffset "+string(soffset)+" - smin "+string(smin)+" - image_index "+string(image_index));
}
else if spritestate==4{ // Hit
    sprite_index=s_aanghit;
    
    smin=floor((facedir)/45)*5;
    image_index=soffset+smin;
    
    soffset+=(8/room_speed);
    if (soffset&gt;=4) { spritestate=0; state=0; soffset=0; }
}
else if spritestate==6{ // Get Up
    sprite_index=s_aanggetup;
    
    smin=floor((facedir)/45)*9;
    image_index=soffset+smin;
    
    soffset+=(8/room_speed);
    if (soffset&gt;=9) { spritestate=0; state=0; soffset=0; }
}

if keyboard_check_pressed(ord('1')){instance_create(128,128,o_punchingbag);}
if keyboard_check_pressed(ord('2')){instance_create(128,128,o_attackingbag);}

}

if spritestate==5{ // Die
    sprite_index=s_aangdie;
    
    smin=floor((facedir)/45)*6;
    image_index=soffset+smin;
    
    soffset+=(8/room_speed);
    if soffset&gt;=5 soffset=5;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if state==1 draw_set_color(c_red);
    draw_circle(x+lengthdir_x(16,facedir),y+lengthdir_y(16,facedir),16,true);
    draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
