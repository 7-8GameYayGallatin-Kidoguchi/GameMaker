<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pause=0;
pausechoice=0;
continues=3;

model_punchingbag_create();

mpgrid=mp_grid_create(0,0,room_width/8,room_height/8,8,8);
mp_grid_add_instances(mpgrid,parent_solid_pathfinding,true);

controltype=-1;
//-1 is keyboard and anything else is a gamepad usb index

draw_set_valign(fa_center);

staminashake=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if player is dead
if o_player.hp == 0{
    pause = true;
}
if keyboard_check_pressed(vk_escape) and o_player.hp!=0{ pause++; if pause==2 pause=0;
    if pause==1 {
  //      instance_deactivate_all(true);
    }
    if pause==0 {
   //     instance_activate_all();
    }
}
else {
    if pause==1{
    if keyboard_check_pressed(vk_up){pausechoice--;}
    if keyboard_check_pressed(vk_down){pausechoice++;}
    //only three options right now
    if pausechoice == 0 { pausechoice=3};
    if pausechoice == 4 { pausechoice=1};
    if o_player.hp == 0 and pausechoice==3 { pausechoice=1};//remove one choice when dead
    if continues &lt; 0 { pausechoice=1};
    }

}
if keyboard_check_pressed(vk_enter){
    if pausechoice == 1 {
        pause=0;
    }
    if pausechoice == 2 {
        //control menu
    }
    if pausechoice == 3 {
        game_end();
    }
    if o_player.hp == 0{
        if continues &gt;= 0{
            if pausechoice == 1 {
                o_player.hp = 50;
                o_player.soffset=0;
                pause=0;
                continues--;
            }
            if pausechoice == 2 {
                game_end();
            }
        }
        else
            game_end();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("Event = " + async_load[? "event_type"]);        // Debug cocde so you can see which event has been
show_debug_message("Pad = " + string(async_load[? "pad_index"]));   // triggered and the pad associated with it.

switch(async_load[? "event_type"])             // Parse the async_load map to see which event has been triggered
{
case "gamepad discovered":                     // A game pad has been discovered
    var pad = async_load[? "pad_index"];       // Get the pad index value from the async_load map
    gamepad_set_axis_deadzone(pad, 0.3);       // Set the "deadzone" for the axis
    gamepad_set_button_threshold(pad, 0.5);    // Set the "threshold" for the triggers
    controltype = pad; //Controller type
    show_debug_message("Changed to controller type");
    break;
case "gamepad lost":                           // Gamepad has been removed or otherwise disabled
    var pad = async_load[? "pad_index"];       // Get the pad index
    controltype = -1; //Keyboard type
    show_debug_message("Changed to keyboard type");
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(ft_def);

if pause==true {   
    draw_set_color(c_black);
    draw_set_alpha(.5);
    draw_rectangle(0,0,960,720,false);
    if o_player.hp != 0 {
        draw_set_color(c_white);
        draw_set_alpha(1);
        draw_set_halign(fa_center);
        draw_text_transformed(960/2, 720/2-100, "Paused", 1, 1, 0);
        
        draw_set_color(c_white);
        draw_set_alpha(1);
        draw_set_halign(fa_center);
        if pausechoice == 1{draw_text_transformed(960/2  +0, 720/2-50, "Resume", 1, 1, 0);}
        else {
            draw_text_transformed(960/2  +0, 720/2-50, "Resume", .75, .75, 0);
        }
    
        draw_set_color(c_white);
        draw_set_alpha(1);
        draw_set_halign(fa_center);
        if pausechoice == 2{draw_text_transformed(960/2  +0, 720/2-25, "Controls", 1, 1, 0);}
        else {
            draw_text_transformed(960/2  +0, 720/2-25, "Controls", .75, .75, 0);
        }
        
        draw_set_color(c_white);
        draw_set_alpha(1);
        draw_set_halign(fa_center);
        if pausechoice == 3{draw_text_transformed(960/2  +0, 720/2-0, "Quit", 1, 1, 0);}
        else {
            draw_text_transformed(960/2  +0, 720/2-0, "Quit", .75, .75, 0);
        }
    }
    if o_player.hp &lt;= 0 and continues &gt;= 0{//if player is dead
    draw_set_color(c_red);
        draw_set_alpha(1);
        draw_set_halign(fa_center);
        //draw_text(960/2+25,720/2-75,"DEAD");
        draw_text_transformed(960/2, 720/2-100, "DEAD " + string(continues) + " Continues left", 1, 1, 0);
    
    draw_set_color(c_red);
        draw_set_alpha(1);
        draw_set_halign(fa_center);
        //draw_text(960/2+10,720/2-25,"Continue?");
        if pausechoice == 1{draw_text_transformed(960/2  +0, 720/2-50, "Continue?", 1, 1, 0);}
        else {
            draw_text_transformed(960/2  +0, 720/2-50, "Continue?", .75, .75, 0);
        }
    draw_set_color(c_red);
        draw_set_alpha(1);
        draw_set_halign(fa_center);
        //draw_text(960/2+10,720/2-25,"Quit");
        if pausechoice == 2{draw_text_transformed(960/2  +0, 720/2-25, "Quit", 1, 1, 0);}
        else {
            draw_text_transformed(960/2  +0, 720/2-25, "Quit", .75, .75, 0);
        }
    }
    
    if o_player.hp &lt;= 0 and continues &lt; 0{//if player is dead and can't continue
    {
        draw_set_color(c_red);
        draw_set_alpha(1);
        draw_set_halign(fa_center);
        //draw_text(960/2+25,720/2-75,"DEAD");
        draw_text_transformed(960/2, 720/2-100, "DEAD", 1, 1, 0);
        draw_set_color(c_red);
            draw_set_alpha(1);
            draw_set_halign(fa_center);
            //draw_text(960/2+10,720/2-25,"Quit");
            if pausechoice == 1{draw_text_transformed(960/2  +0, 720/2-50, "Quit", 1, 1, 0);}
            else {
                draw_text_transformed(960/2  +0, 720/2-50, "Quit", .75, .75, 0);
            }
    }
    }
}

draw_set_font(ft_debug);
draw_set_halign(fa_left);
draw_set_color(c_white);
if gamepad_is_connected(controltype)
    {
    draw_text(32, 32, "Gamepad Slot - " + string(controltype));
    draw_text(32, 32 + 20, "Gamepad Type - " + string(gamepad_get_description(controltype)));
    //draw_text(32, 32 + 40, "Left H Axis - " + string(gamepad_axis_value(controltype, gp_axislh)));
    //draw_text(32, 32 + 60, "Left V Axis - " + string(gamepad_axis_value(controltype, gp_axislv)));
    draw_text(32, 32 + 40, "Left Stick - " + string(point_direction(0,0,gamepad_axis_value(controltype, gp_axislh),gamepad_axis_value(controltype, gp_axislv))));
    //draw_text(32, 32 + 80, "Right H Axis - " + string(gamepad_axis_value(controltype, gp_axisrh)));
    //draw_text(32, 32 + 100, "Right V Axis - " + string(gamepad_axis_value(controltype, gp_axisrv)));
    draw_text(32, 32 + 60, "Right Stick - " + string(point_direction(0,0,gamepad_axis_value(controltype, gp_axisrh),gamepad_axis_value(controltype, gp_axisrv))));
    //draw_text(32, 32 + 120, "D-Pad H Axis - " + string(gamepad_button_check(controltype, gp_padr) - gamepad_button_check(controltype, gp_padl)));
    //draw_text(32, 32 + 140, "D-Pad V Axis - " + string(gamepad_button_check(controltype, gp_padd) - gamepad_button_check(controltype, gp_padu)));
    draw_text(32, 32 + 80, "D-Pad - " + string(point_direction(0,0,gamepad_button_check(controltype, gp_padr) - gamepad_button_check(controltype, gp_padl),gamepad_button_check(controltype, gp_padd) - gamepad_button_check(controltype, gp_padu))));
    draw_text(32, 32 + 100, "LSB - " + string(gamepad_button_value(controltype, gp_stickl)));
    draw_text(32, 32 + 120, "RSB - " + string(gamepad_button_value(controltype, gp_stickr)));
    
    draw_text(32, 32 + 160, "LT - " + string(gamepad_button_value(controltype, gp_shoulderlb)));
    draw_text(32, 32 + 180, "RT - " + string(gamepad_button_value(controltype, gp_shoulderrb)));
    draw_text(32, 32 + 200, "LB - " + string(gamepad_button_value(controltype, gp_shoulderl)));
    draw_text(32, 32 + 220, "RB - " + string(gamepad_button_value(controltype, gp_shoulderr)));
    
    draw_text(32, 32 + 260, "Start - " + string(gamepad_button_value(controltype, gp_start)));
    draw_text(32, 32 + 280, "Select - " + string(gamepad_button_value(controltype, gp_select)));
    
    draw_text(32, 32 + 320, "A - " + string(gamepad_button_value(controltype, gp_face1)));
    draw_text(32, 32 + 340, "B - " + string(gamepad_button_value(controltype, gp_face2)));
    draw_text(32, 32 + 360, "X - " + string(gamepad_button_value(controltype, gp_face3)));
    draw_text(32, 32 + 380, "Y - " + string(gamepad_button_value(controltype, gp_face4)));
    }
else
    {
    draw_text(32, 32, "FPS "+string(fps));
    draw_text(32, 32+20, "FPS Max "+string(fps_real));
    draw_text(32, 32+40, "Keyboard &amp; Mouse Input");
    //draw_text(32, 32 + 20, "Gamepad not connected" + string(gamepad_get_description(controltype)));
    }

//Black Backdrop
draw_set_color(c_black);
draw_rectangle(960-508,720-82,960,720,false);
draw_triangle(960-508,720-82,960-508,720-60,960-558,720-60,false);
draw_rectangle(960-558,720-60,960-500,720,false);
draw_set_circle_precision(50);
draw_circle(960-24,720,140,false);
draw_set_circle_precision(24);
draw_rectangle(960-24,720,960,720-140,false);

var shake=0;
//Health Bar
if o_player.hpregen&gt;=(room_speed*4){ //If health is regenerating
    draw_set_color(make_color_rgb(abs(255-255*(o_player.hp/100)),abs(255-255*(o_player.hp/100)),abs(255-255*(o_player.hp/100)))); // Black to white
    draw_rectangle(960-488,720-62,960-102,720-50,true); // Border directly under the health bar
}
else if o_player.state==2{ //If player is hit (looses hp)
    draw_set_color(make_color_rgb(abs(255-(255*(o_player.hp/100))),0,0)); // black to red
    var shake=+random_range(-(abs(100-100*(o_player.hp/100))/40),(abs(100-100*(o_player.hp/100))/40));
    draw_rectangle(960-488+shake,720-62+shake,960-102+shake,720-50+shake,true); // Border directly under the health bar, apply a randomized shift in the bar to make a shake effect
}

draw_set_color(make_color_rgb(255*(clamp(abs((o_player.hp/50)-2),0,1)),255*(clamp(o_player.hp/50,0,1)),0)); // Green to red
if o_player.hp&gt;0 draw_rectangle(960-(386*(o_player.hp/100))-102+shake,720-62+shake,960-102+shake,720-50+shake,false); // Health bar

//Stam Bar
if o_player.stamregen&gt;=(room_speed*2){ // If stamina is regenerating
    draw_set_color(make_color_rgb(abs(255-255*(o_player.stamina/100)),abs(255-255*(o_player.stamina/100)),abs(255-255*(o_player.stamina/100)))); // Black to white
    draw_rectangle(960-538,720-40,960-102,720-20,true); // Border directly under the stamina bar
}
if o_player.state==1{ // If player attacks (uses stamina)
    draw_set_color(make_color_rgb(abs(255-(255*(o_player.stamina/100))),0,0)); // black to red
    draw_rectangle(960-538,720-40,960-102,720-20,true); // Border directly under the stamina bar
}
else if mouse_check_button_pressed(mb_left) and o_player.stamina==0 staminashake++; // Try to attack with no stamina
if staminashake&gt;(room_speed/4) staminashake=0;
else if staminashake&gt;0 and o_player.stamina&lt;200 {
    staminashake++;
    //draw_set_color(c_red);
    draw_set_color(make_color_rgb(abs(255-255*(o_player.stamregen/120)),0,0)); // red to black
    var shake=+random_range(-2,2);
    draw_rectangle(960-538+shake,720-40+shake,960-102+shake,720-20+shake,false); //Apply a randomized shift in the bar to make a shake effect
}

draw_set_color(make_color_rgb(0,255*(o_player.stamina/100),255)); // Cyan to royal blue
if o_player.stamina&gt;0 draw_rectangle(960-(436*(o_player.stamina/100))-102,720-40,960-102,720-20,false); // Stamina

//Aang head
draw_set_color(c_white);
draw_sprite(s_hudaang,0,960,720);

//Camera mode
draw_set_halign(fa_right);
if o_camera.cameramode==0 draw_text(960-140,720-100,"Free");
else if o_camera.cameramode==1 draw_text(960-140,720-100,"Follow");
else if o_camera.cameramode==2 draw_text(960-140,720-100,"Target");
draw_set_halign(fa_left);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
