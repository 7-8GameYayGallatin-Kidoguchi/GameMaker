<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_aangs</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>s_playercol</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x=x;
y=y;
z=0;

facedir=0;
spd=2;

stamina=100;
stamregen=0;
hp=100;
hpregen=0;

state=0;
    // 0 - normal movement
    // 1 - attack
    // 2 - hit
    // 3 - dead
spritestate=0;
    // 0 - stand
    // 1 - walk
    // 2 - run
    // 3 - attack
    // 4 - hit
    // 5 - die
    // 6 - get up
smin=0;
soffset=0; // aka the current frame in the animation
      
cooldown=0;

camera=instance_create(x,y,o_camera);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !control.pause {
//Set direction away from camera
var dir=(o_camera.dir_face+180)%360; //Direction away from camera

//Movement
var xspd = 0;
var yspd = 0;
var movedir=-1;

if control.controltype!=-1{
    xspd=gamepad_axis_value(control.controltype,gp_axislh);
    yspd=gamepad_axis_value(control.controltype,gp_axislv);
    if gamepad_button_check(controltype, gp_shoulderl) spd=4; else spd=2;
    
    if (gamepad_button_check(controltype, gp_face2) and cooldown&lt;=0 and stamina!=0) { stamina-=5; stamregen=0; state=1; cooldown=room_speed/8; }
    
}
else{
    if keyboard_check(ord('W')) yspd--; // Move forward
    if keyboard_check(ord('S')) yspd++; //Move backwards
    if keyboard_check(ord('D')) xspd++; //Strafe right
    if keyboard_check(ord('A')) xspd--; //Strafe left
    if keyboard_check(vk_shift) spd=4; else spd=2;
    
    if (mouse_check_button_pressed(mb_left) and cooldown&lt;=0 and stamina!=0) { stamina-=5; stamregen=0; state=1; cooldown=room_speed/8; }
    
}

if (xspd!=0 or yspd!=0) movedir = dir+((point_direction(0,0,xspd,yspd)+270)%360);
if movedir!=-1 facedir=movedir%360;

if state==0{ // Movement
    if stamregen!=(room_speed*2) stamregen++;
    if stamregen==(room_speed*2){stamina++;}
    stamina=clamp(stamina,0,100);
    
    //Collisions
    if (movedir!=-1){
        
        if spd==2 spritestate=1;
        else if spd==4 spritestate=2;
    
        if lengthdir_y(1,movedir)!=0 {
            if (place_meeting(x,y+lengthdir_y(spd,movedir),parent_solid)){
                if lengthdir_y(1,movedir)&gt;0 {
                    while(!place_meeting(x,y+1,parent_solid)){
                        y++;
                    }
                }
                else if lengthdir_y(1,movedir)&lt;0 {
                    while(!place_meeting(x,y-1,parent_solid)){
                        y--;
                    }
                }
            }
            else y+=lengthdir_y(spd,movedir);
        }
        if lengthdir_x(1,movedir)!=0 {
            if (place_meeting(x+lengthdir_x(spd,movedir),y,parent_solid)){
                if lengthdir_x(1,movedir)&gt;0 {
                    while(!place_meeting(x+1,y,parent_solid)){
                        x++;
                    }
                }
                else if lengthdir_x(1,movedir)&lt;0 {
                    while(!place_meeting(x-1,y,parent_solid)){
                        x--;
                    }
                }
            }
            else x+=lengthdir_x(spd,movedir);
        }
    } else spritestate=0;
}
else if state==1{ // Attacking
    if cooldown&gt;0 {cooldown--;}
    else {state=0; }
}


if spritestate==0{ // Standing
    sprite_index=s_aangs;
    image_speed=0;
    image_index= (((dir-facedir)+300)%360)/45;
}
else if spritestate==1{ // Walking
    sprite_index=s_aangw;
    
    soffset+=(6/room_speed); //I calculate the frame to use by hand so that when the sprite changes to running or a new angle
    if (soffset&gt;=8) soffset=0; // Then you're still aways putting the same foot forward
    
    smin=(((dir-facedir+270)%360)/45)*8;
    image_index=soffset+smin;
    
}
else if spritestate==2{ // Running
    sprite_index=s_aangr;
    
    soffset+=(8/room_speed);
    if (soffset&gt;=8) soffset=0;
    
    smin=(((dir-facedir+270)%360)/45)*8;
    image_index=soffset+smin;
}
else if spritestate==3{ // Attacking
 // N/A
}
else if spritestate==4{ // Hit
 // N/A
}
else if spritestate==5{ // Die
 // N/A
}
else if spritestate==6{ // Get Up
 // N/A
}

if keyboard_check_pressed(ord('1')){instance_create(128,128,o_punchingbag);}
if keyboard_check_pressed(ord('2')){instance_create(128,128,o_attackingbag);}

}
else image_speed=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//var player_tex = sprite_get_texture(s_player,0);
//d3d_draw_cylinder(x-8,y-8,z, x+8,y+8,z+8,player_tex,1,1,true,12);

d3d_transform_set_identity();
d3d_transform_add_rotation_x(90);
d3d_transform_add_rotation_z(point_direction(x, y, o_camera.x,o_camera.y)+90);
d3d_transform_add_translation(x, y, z);
//
draw_sprite_ext(sprite_index, -1, 0, 0, 1, 1, 0, c_white, 1);
//
d3d_transform_set_identity();

if state==1 draw_set_color(c_red);
    d3d_transform_set_identity();
    d3d_transform_add_translation(x, y, z+1);
    draw_circle(lengthdir_x(16,facedir),lengthdir_y(16,facedir),16,true);
    draw_set_color(c_white);
    d3d_transform_set_identity();

/*
draw_rectangle_colour(lengthdir_x(16,face_dir+90),lengthdir_y(16,face_dir+90),
        lengthdir_x(16,face_dir+270)+lengthdir_x(32,face_dir),lengthdir_y(16,face_dir+270)+lengthdir_y(32,face_dir),c_red,c_blue,c_lime,c_yellow,false);
    draw_circle(lengthdir_x(16,face_dir+90),lengthdir_y(16,face_dir+90),2,false);
    draw_circle(lengthdir_x(16,face_dir+270)+lengthdir_x(32,face_dir),lengthdir_y(16,face_dir+270)+lengthdir_y(32,face_dir),2,false);
    draw_rectangle(lengthdir_x(16,face_dir+90),lengthdir_y(16,face_dir+90),
        lengthdir_x(16,face_dir+270)+lengthdir_x(32,face_dir),lengthdir_y(16,face_dir+270)+lengthdir_y(32,face_dir),true);
        */
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
